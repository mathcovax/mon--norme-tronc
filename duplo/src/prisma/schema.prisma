// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DATABASE_URL")
}

model user {
    id                                    String                          @id @default(uuid())
    email                                 String                          @unique @db.VarChar(320)
    lastname                              String                          @db.VarChar(32)
    firstname                             String                          @db.VarChar(36)
    dateOfBirth                           DateTime                        @db.Date
    address                               String                          @db.VarChar(400)
    primordialRole                        primordial_role                 @default(CUSTOMER)
    organization                          organization?
    muted                                 Boolean                         @default(false)
    userToOrganization                    user_to_organization[]
    article                               article[]
    command                               command[]
    commandItems                          command_item[]
    createdBundle                         bundle[]                        @relation("create")
    havedBundle                           bundle[]                        @relation("have")
    emailNotifcationsNewsletter           Boolean                         @default(false)
    emailNotifcationsProductStock         Boolean                         @default(true)
    emailNotifcationsPromotion            Boolean                         @default(true)
    emailNotifcationsNewProductInCategory Boolean                         @default(true)
    deleted                               Boolean                         @default(false)
    subscribeProductNotifications         subscribeProductNotifications[]
    lastPullData                          DateTime                        @default(now())
    createdAt                             DateTime                        @default(now())
    updatedAt                             DateTime                        @updatedAt
}

enum primordial_role {
    CUSTOMER
    MODERATOR
    CONTENTS_MASTER
    ADMIN
}

model organization {
    id                 String                 @id @default(uuid())
    name               String                 @unique @db.VarChar(255)
    label              String?                @db.VarChar(36)
    emailSupport       String?                @db.VarChar(255)
    ownerId            String                 @unique
    owner              user                   @relation(fields: [ownerId], references: [id])
    suspended          Boolean                @default(false)
    userToOrganization user_to_organization[]
    productSheet       product_sheet[]
    imageProductSheet  image_product_sheet[]
    warehouses         warehouse[]
    logoKey            String?                @db.VarChar(255)
    logoUrl            String?                @db.VarChar(400)
    products           product[]
    promotions         promotion[]
    product_return     product_return[]
    grid               String?                @db.Text
}

model user_to_organization {
    organizationRole organization_role
    userId           String
    user             user              @relation(fields: [userId], references: [id])
    organizationId   String
    organization     organization      @relation(fields: [organizationId], references: [id])

    @@unique([userId, organizationId])
}

enum organization_role {
    STORE_KEEPER
    PRODUCT_SHEET_MANAGER
    ACCOUNTANT
    OWNER
}

model category {
    name                          String                          @unique @db.VarChar(255)
    disabled                      Boolean                         @default(false)
    imageUrl                      String?                         @db.VarChar(400)
    imageKey                      String?                         @db.VarChar(255)
    parentCategories              category_to_parent_category[]
    productSheets                 product_sheet_to_category[]
    navigationItem                navigation_item[]
    subscribeProductNotifications subscribeProductNotifications[]
}

model parent_category {
    name           String                        @unique @db.VarChar(255)
    categories     category_to_parent_category[]
    navigationItem navigation_item[]
}

model category_to_parent_category {
    categoryName       String
    parentCategoryName String
    category           category        @relation(fields: [categoryName], references: [name])
    parentCategory     parent_category @relation(fields: [parentCategoryName], references: [name])

    @@unique([categoryName, parentCategoryName])
}

model newsletter {
    id        String   @id @default(uuid())
    object    String   @db.VarChar(255)
    content   String   @db.Text
    createdAt DateTime @default(now())
    sendAt    DateTime @default(now())
    isSent    Boolean  @default(false)
}

model product_sheet {
    id                            String                          @id @default(uuid())
    ref                           String                          @db.VarChar(20)
    name                          String                          @db.VarChar(255)
    description                   String                          @db.Text
    shortDescription              String                          @db.VarChar(255)
    createdAt                     DateTime                        @default(now())
    updatedAt                     DateTime                        @updatedAt
    price                         Float
    variationName                 String?                         @db.VarChar(30)
    variationGroup                String?                         @db.VarChar(30)
    organizationId                String
    organization                  organization                    @relation(fields: [organizationId], references: [id])
    warehouseId                   String
    warehouse                     warehouse                       @relation(fields: [warehouseId], references: [id])
    products                      product[]
    facets                        facet[]
    status                        product_sheet_status            @default(UNVERIFIED)
    article                       article[]
    commandItems                  command_item[]
    images                        image_product_sheet[]
    categories                    product_sheet_to_category[]
    promotions                    promotion[]
    subscribeProductNotifications subscribeProductNotifications[]

    @@unique([ref, organizationId])
}

enum product_sheet_status {
    VERIFIED
    UNVERIFIED
    REMOVE
}

model product_sheet_to_category {
    productSheetId String
    categoryName   String
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    category       category      @relation(fields: [categoryName], references: [name])
    createdAt      DateTime      @default(now())

    @@unique([categoryName, productSheetId])
}

model image_product_sheet {
    id             String        @id @default(uuid())
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    organization   organization  @relation(fields: [organizationId], references: [id])
    organizationId String
    url            String        @db.VarChar(400)
    key            String        @db.VarChar(255)
    alt            String?       @db.VarChar(255)
}

model warehouse {
    id             String          @id @default(uuid())
    name           String          @db.VarChar(255)
    address        String          @db.Text
    organization   organization    @relation(fields: [organizationId], references: [id])
    organizationId String
    productSheet   product_sheet[]
}

model navigation_item {
    id                 String               @id @default(uuid())
    type               navigation_item_type
    priority           Int
    parentCategoryName String?
    parentCategory     parent_category?     @relation(fields: [parentCategoryName], references: [name])
    categoryName       String?
    category           category?            @relation(fields: [categoryName], references: [name])
    url                String?              @db.VarChar(400)
    title              String?              @unique @db.VarChar(30)
}

enum navigation_item_type {
    PARENT_CATEGORY
    CATEGORY
    LINK
}

model product {
    sku              String              @unique @db.VarChar(255)
    productSheet     product_sheet       @relation(fields: [productSheetId], references: [id])
    productSheetId   String
    organization     organization        @relation(fields: [organizationId], references: [id])
    organizationId   String
    status           product_status      @default(IN_STOCK)
    productToBundles product_to_bundle[]
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt
    productReturns   product_return[]
}

enum product_status {
    WRONG
    SOLD
    IN_STOCK
}

model facet {
    type           facet_type
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    value          String        @db.VarChar(50)

    @@unique([type, productSheetId])
}

enum facet_type {
    COLOR
    SIZE
    DIAMETER
    TARGET
    ACCESSORY
    MATERIAL
    STIMULATION
}

model article {
    id             String        @id @default(uuid())
    user           user          @relation(fields: [userId], references: [id])
    userId         String
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    createdAt      DateTime      @default(now())
}

model command {
    id                         String                         @id @default(uuid())
    user                       user                           @relation(fields: [userId], references: [id])
    userId                     String
    lastname                   String                         @db.VarChar(32)
    firstname                  String                         @db.VarChar(36)
    address                    String                         @db.VarChar(400)
    stripeSessionId            String                         @db.VarChar(255)
    status                     command_status                 @default(WAITING_PAYMENT)
    commandItems               command_item[]
    stripeNotificationCheckout stripe_notification_checkout[]
    createdAt                  DateTime                       @default(now())
    updatedAt                  DateTime                       @updatedAt
    bundles                    bundle[]
    productReturns             product_return[]
}

enum command_status {
    CANCELED
    WAITING_PAYMENT
    IN_PROGRESS
    IN_DELIVERY
    DONE
}

model command_item {
    id                 Int           @id @default(autoincrement())
    command            command       @relation(fields: [commandId], references: [id])
    commandId          String
    productSheet       product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId     String
    user               user          @relation(fields: [userId], references: [id])
    userId             String
    quantity           Int
    processQuantity    Int           @default(0)
    freezeProductSheet String
    canceled           Boolean       @default(false)
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt

    @@unique([commandId, productSheetId])
}

model stripe_notification_checkout {
    id              Int      @id @default(autoincrement())
    type            String
    stripeSessionId String   @db.VarChar(255)
    command         command  @relation(fields: [commandId], references: [id])
    commandId       String
    createdAt       DateTime @default(now())
}

model bundle {
    id          Int                 @id @default(autoincrement())
    carrierName carrier_name
    command     command             @relation(fields: [commandId], references: [id])
    commandId   String
    idShip      String              @unique @db.VarChar(15)
    products    product_to_bundle[]
    status      bundle_status       @default(CREATED)
    creator     user                @relation(name: "create", fields: [creatorId], references: [id])
    creatorId   String
    createdAt   DateTime            @default(now())
    user        user                @relation(name: "have", fields: [userId], references: [id])
    userId      String
}

enum carrier_name {
    LA_POSTE
}

enum bundle_status {
    CREATED
    CARRIER_SUPPORTED
    CARRIER_PROCESS
    UNDELIVERABLE
    DONE
    DONE_OFFICE
    BACK
    BACK_DONE
}

model product_to_bundle {
    bundle     bundle   @relation(fields: [bundleId], references: [id])
    bundleId   Int
    product    product  @relation(fields: [productSku], references: [sku])
    productSku String
    createdAt  DateTime @default(now())

    @@id([bundleId, productSku])
}

model promotion {
    id             Int           @id @default(autoincrement())
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    organization   organization  @relation(fields: [organizationId], references: [id])
    organizationId String
    percentage     Int
    startDate      DateTime
    endDate        DateTime
    reason         String        @db.VarChar(255)
    createdAt      DateTime      @default(now())
}

model product_return {
    id             Int                   @id @default(autoincrement())
    product        product               @relation(fields: [productSku], references: [sku])
    productSku     String
    status         product_return_status @default(WAITING_RETURN)
    organization   organization          @relation(fields: [organizationId], references: [id])
    organizationId String
    createdAt      DateTime              @default(now())
    reason         String                @db.VarChar(255)
    command        command               @relation(fields: [commandId], references: [id])
    commandId      String
}

enum product_return_status {
    WAITING_RETURN
    REFUNDED
    INVALID
}

model subscribeProductNotifications {
    id             Int               @id @default(autoincrement())
    productSheet   product_sheet?    @relation(fields: [productSheetId], references: [id])
    productSheetId String?
    category       category?         @relation(fields: [categoryName], references: [name])
    categoryName   String?
    user           user              @relation(fields: [userId], references: [id])
    userId         String
    type           notification_type
    createdAt      DateTime          @default(now())
}

enum notification_type {
    PRODUCT_PROMOTION
    NEW_PRODUCT_IN_CATEGORY
    PRODUCT_RESTOCK
    PRODUCT_NO_STOCK
}
