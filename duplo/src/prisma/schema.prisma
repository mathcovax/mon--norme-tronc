// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DATABASE_URL")
}

model user {
    id                 String                 @id @default(uuid())
    email              String                 @unique @db.VarChar(320)
    lastname           String                 @db.VarChar(32)
    firstname          String                 @db.VarChar(36)
    dateOfBirth        DateTime               @db.Date
    address            String                 @db.VarChar(400)
    primordialRole     primordial_role        @default(CUSTOMER)
    organization       organization?
    muted              Boolean                @default(false)
    userToOrganization user_to_organization[]
    article            article[]
    command            command[]
    commandItems       command_item[]
}

enum primordial_role {
    CUSTOMER
    MODERATOR
    CONTENTS_MASTER
    ADMIN
}

model organization {
    id                 String                 @id @default(uuid())
    name               String                 @unique @db.VarChar(255)
    label              String?                @db.VarChar(36)
    ownerId            String                 @unique
    owner              user                   @relation(fields: [ownerId], references: [id])
    suspended          Boolean                @default(false)
    userToOrganization user_to_organization[]
    productSheet       product_sheet[]
    imageProductSheet  image_product_sheet[]
    warehouses         warehouse[]
    logoKey            String?                @db.VarChar(255)
    logoUrl            String?                @db.VarChar(400)
    products           product[]
}

model user_to_organization {
    organizationRole organization_role
    userId           String
    user             user              @relation(fields: [userId], references: [id])
    organizationId   String
    organization     organization      @relation(fields: [organizationId], references: [id])

    @@unique([userId, organizationId])
}

enum organization_role {
    STORE_KEEPER
    PRODUCT_SHEET_MANAGER
    ACCOUNTANT
    OWNER
}

model category {
    name             String                        @unique @db.VarChar(255)
    disabled         Boolean                       @default(false)
    imageUrl         String?                       @db.VarChar(400)
    imageKey         String?                       @db.VarChar(255)
    parentCategories category_to_parent_category[]
    productSheets    product_sheet_to_category[]
    navigationItem   navigation_item[]
}

model parent_category {
    name           String                        @unique @db.VarChar(255)
    categories     category_to_parent_category[]
    navigationItem navigation_item[]
}

model category_to_parent_category {
    categoryName       String
    parentCategoryName String
    category           category        @relation(fields: [categoryName], references: [name])
    parentCategory     parent_category @relation(fields: [parentCategoryName], references: [name])

    @@unique([categoryName, parentCategoryName])
}

model product_sheet {
    id               String                      @id @default(uuid())
    name             String                      @db.VarChar(255)
    description      String                      @db.Text
    shortDescription String                      @db.VarChar(255)
    createdAt        DateTime                    @default(now())
    updatedAt        DateTime                    @updatedAt
    price            Float
    organizationId   String
    organization     organization                @relation(fields: [organizationId], references: [id])
    warehouseId      String
    warehouse        warehouse                   @relation(fields: [warehouseId], references: [id])
    products         product[]
    facets           facet[]
    status           product_sheet_status        @default(UNVERIFIED)
    article          article[]
    commandItems     command_item[]
    images           image_product_sheet[]
    categories       product_sheet_to_category[]
}

enum product_sheet_status {
    VERIFIED
    UNVERIFIED
    REMOVE
}

model product_sheet_to_category {
    productSheetId String
    categoryName   String
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    category       category      @relation(fields: [categoryName], references: [name])

    @@unique([categoryName, productSheetId])
}

model image_product_sheet {
    id             String        @id @default(uuid())
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    organization   organization  @relation(fields: [organizationId], references: [id])
    organizationId String
    url            String        @db.VarChar(400)
    key            String        @db.VarChar(255)
    alt            String?       @db.VarChar(255)
}

model warehouse {
    id             String          @id @default(uuid())
    name           String          @db.VarChar(255)
    address        String          @db.Text
    organization   organization    @relation(fields: [organizationId], references: [id])
    organizationId String
    productSheet   product_sheet[]
}

model navigation_item {
    id                 String               @id @default(uuid())
    type               navigation_item_type
    priority           Int
    parentCategoryName String?
    parentCategory     parent_category?     @relation(fields: [parentCategoryName], references: [name])
    categoryName       String?
    category           category?            @relation(fields: [categoryName], references: [name])
    url                String?              @db.VarChar(400)
    title              String?              @unique @db.VarChar(30)
}

enum navigation_item_type {
    PARENT_CATEGORY
    CATEGORY
    LINK
}

model product {
    sku            String         @unique @db.VarChar(255)
    productSheet   product_sheet  @relation(fields: [productSheetId], references: [id])
    productSheetId String
    organization   organization   @relation(fields: [organizationId], references: [id])
    organizationId String
    status         product_status @default(IN_STOCK)
    command        command?       @relation(fields: [commandId], references: [id])
    commandId      String?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

enum product_status {
    ORDER
    WRONG
    SOLD
    IN_STOCK
}

model facet {
    type           facet_type
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    value          String        @db.VarChar(50)

    @@unique([type, productSheetId])
}

enum facet_type {
    COLOR
    SIZE
    DIAMETER
    TARGET
    ACCESSORY
    MATERIAL
    STIMULATION
}

model article {
    id             String        @id @default(uuid())
    user           user          @relation(fields: [userId], references: [id])
    userId         String
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    createdAt      DateTime      @default(now())
}

model command {
    id                         String                         @id @default(uuid())
    user                       user                           @relation(fields: [userId], references: [id])
    userId                     String
    lastname                   String                         @db.VarChar(32)
    firstname                  String                         @db.VarChar(36)
    address                    String                         @db.VarChar(400)
    stripeSessionId            String                         @db.VarChar(255)
    status                     command_status                 @default(WAITING_PAYMENT)
    product                    product[]
    commandItems               command_item[]
    stripeNotificationCheckout stripe_notification_checkout[]
    createdAt                  DateTime                       @default(now())
    updatedAt                  DateTime                       @updatedAt
}

enum command_status {
    CANCELED
    WAITING_PAYMENT
    IN_PROGESS
    DONE
}

model command_item {
    id                 Int           @id @default(autoincrement())
    command            command       @relation(fields: [commandId], references: [id])
    commandId          String
    productSheet       product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId     String
    user               user          @relation(fields: [userId], references: [id])
    userId             String
    quantity           Int
    processQuantity    Int           @default(0)
    freezeProductSheet String
    createdAt          DateTime      @default(now())
    updatedAt          DateTime      @updatedAt
}

model stripe_notification_checkout {
    id              Int      @id @default(autoincrement())
    type            String
    stripeSessionId String   @db.VarChar(255)
    command         command  @relation(fields: [commandId], references: [id])
    commandId       String
    createdAt       DateTime @default(now())
}
