// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DATABASE_URL")
}

model user {
    id                 String                 @id @default(uuid())
    email              String                 @unique @db.VarChar(320)
    lastname           String                 @db.VarChar(32)
    firstname          String                 @db.VarChar(36)
    dateOfBirth        DateTime               @db.Date
    address            String                 @db.VarChar(400)
    primordialRole     primordial_role        @default(CUSTOMER)
    organization       organization?
    muted              Boolean                @default(false)
    userToOrganization user_to_organization[]
}

enum primordial_role {
    CUSTOMER
    MODERATOR
    CONTENTS_MASTER
    ADMIN
}

model organization {
    id                 String                 @id @default(uuid())
    name               String                 @unique @db.VarChar(255)
    label              String?                @db.VarChar(36)
    ownerId            String                 @unique
    owner              user                   @relation(fields: [ownerId], references: [id])
    suspended          Boolean                @default(false)
    userToOrganization user_to_organization[]
    product_sheet      product_sheet[]
}

model user_to_organization {
    organizationRole organization_role
    userId           String
    user             user              @relation(fields: [userId], references: [id])
    organizationId   String
    organization     organization      @relation(fields: [organizationId], references: [id])

    @@unique([userId, organizationId])
}

enum organization_role {
    STORE_KEEPER
    PRODUCT_SHEET_MANAGER
    ACCOUNTANT
    OWNER
}

model category {
    id              String                        @id @default(uuid())
    name            String                        @unique @db.VarChar(255)
    disabled        Boolean                       @default(false)
    parent_category category_to_parent_category[]
    product_sheet   product_sheet_to_category[]
}

model parent_category {
    id       String                        @id @default(uuid())
    name     String                        @db.VarChar(255)
    category category_to_parent_category[]
}

model category_to_parent_category {
    id               String          @id @default(uuid())
    categoryId       String
    parentCategoryId String
    category         category        @relation(fields: [categoryId], references: [id])
    parentCategory   parent_category @relation(fields: [parentCategoryId], references: [id])
}

model product_sheet {
    id                 String                      @id @default(uuid())
    name               String                      @db.VarChar(255)
    description        String                      @db.Text
    shortDescription   String                      @db.VarChar(255)
    price              Float
    category           product_sheet_to_category[]
    createdAt          DateTime                    @default(now())
    updatedAt          DateTime                    @updatedAt
    productSheetImages product_sheet_images[]
    organization       organization?               @relation(fields: [organizationId], references: [id])
    organizationId     String?
}

model product_sheet_to_category {
    id             String        @id @default(uuid())
    productSheetId String
    categoryId     String
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    category       category      @relation(fields: [categoryId], references: [id])
}

model product_sheet_images {
    id             String        @id @default(uuid())
    productSheet   product_sheet @relation(fields: [productSheetId], references: [id])
    productSheetId String
    path           String        @db.VarChar(255)
    alt            String        @db.VarChar(255)
    createdAt      DateTime      @default(now())
    updatedAt      DateTime      @updatedAt
}
