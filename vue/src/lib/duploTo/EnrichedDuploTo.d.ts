
/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// noinspection JSUnusedGlobalSymbols
// Generated by @duplojs/to

export type request_body_0 = string

export type response_0_0 = {
    code: 401;
    ok: false;
    info: "firebase.token.invalid";
} & {body: undefined};

export type response_0_1 = {
    code: 404;
    ok: false;
    info: "user.notfound";
} & {body: undefined};

export type response_body_0_2 = string

export type response_0_2 = {
    code: 200;
    ok: true;
    info: "user.logged";
} & {body: response_body_0_2};

export type request_body_1 = {
    fireBaseIdToken: string;
    lastname: string;
    firstname: string;
    address: string;
    dateOfBirth: Date;
}

export type response_1_0 = {
    code: 401;
    ok: false;
    info: "firebase.token.invalid";
} & {body: undefined};

export type response_1_1 = {
    code: 409;
    ok: false;
    info: "user.alreadyExist";
} & {body: undefined};

export type response_1_2 = {
    code: 400;
    ok: false;
    info: "user.address.invalid";
} & {body: undefined};

export type response_1_3 = {
    code: 400;
    ok: false;
    info: "user.dateOfBirth.invalid";
} & {body: undefined};

export type GetDef<
	method extends DefEnrichedDuplojsTo["method"],
	path extends Extract<
		DefEnrichedDuplojsTo, 
		{method: method}
	>["path"] = any, 
> = Extract<
	DefEnrichedDuplojsTo, 
	{
		method: method,
		path: path
	}
>;

export type DefDefinition = {
	path: string,
	method: string,
	body: unknown,
	parameters: unknown,
	response: ResponseDefinition,
}

export type GetResponseByInfo<
	def extends DefDefinition,
	info extends def["response"]["info"]
> = Extract<
	def["response"], 
	{
		info: info
	}
>;

export type GetResponseByCode<
	def extends DefDefinition,
	code extends def["response"]["code"]
> = Extract<
	def["response"], 
	{
		code: code
	}
>;

export type DefEnrichedDuplojsTo = {
	path: "/login",
	method: "POST",
	body: request_body_0,
	parameters: undefined,
	response: response_0_0
		| response_0_1
		| response_0_2,
} | {
	path: "/register",
	method: "POST",
	body: request_body_1,
	parameters: undefined,
	response: response_1_0
		| response_1_1
		| response_1_2
		| response_1_3,
};


export type BaseRequestParameters = {
	disabledPrefix?: boolean,
} & Omit<RequestInit, "headers" | "method">;

export type UndefinedRequestParameters = {
	headers?: string | string[];
}

export type DefToArgumentsWithInfo<
	responseDefinition extends ResponseDefinition
> = responseDefinition extends ResponseDefinition 
	? [data: responseDefinition["body"], info: responseDefinition["info"]]
	: never

export type DefToArgumentsWithCode<
	responseDefinition extends ResponseDefinition
> = responseDefinition extends ResponseDefinition 
	? [data: responseDefinition["body"], code: responseDefinition["code"]]
	: never

export type RequestCallbackError = (error: Error) => void

export type ResponseObjectError = {
	success: false,
	error: Error,
}

export interface ResponseDefinition {
	code: number;
	ok: boolean;
	info?: string;
	body?: any;
}

export type RepDefToResponseObject<repDef extends ResponseDefinition> = 
	repDef extends ResponseDefinition 
		? {
			success: true,
			response: Response,
			data: repDef["body"],
			info: repDef["info"],
			code: repDef["code"]
		}
		: never

export declare class EnrichedRequestor<
	repDef extends ResponseDefinition
>{

	s(cb: (data: Extract<repDef, {ok: true}>["body"]) => void): this;
	sd(): Promise<
		Extract<repDef, {ok: true}>["body"]
	>;

	e(cb: (data: Extract<repDef, {ok: false}>["body"]) => void): this;
	ed(): Promise<
		Extract<repDef, {ok: false}>["body"]
	>;

	info<_info extends repDef["info"]>(
		info: _info | _info[],
		cb: (...args: DefToArgumentsWithInfo<Extract<repDef, {info: _info}>>) => void
	): this;
	id<_info extends repDef["info"]>(info: _info | _info[]): Promise<
		Extract<repDef, {info: _info}>["body"]
	>;

	code<_code extends repDef["code"]>(
		code: _code | _code[],
		cb: (...args: DefToArgumentsWithCode<Extract<repDef, {code: _code}>>) => void
	): this;
	cd<_code extends repDef["code"]>(code: _code | _code[]): Promise<
		Extract<repDef, {code: _code}>["body"]
	>;

	then(cb: (response: RepDefToResponseObject<repDef>) => void): this;
	catch(cb: RequestCallbackError): this;
	finally(cb: (response: RepDefToResponseObject<repDef> | ResponseObjectError) => void): this;
	result: Promise<
		| RepDefToResponseObject<repDef>
		| ResponseObjectError
	>;
}

export interface EnrichedDuploTo<
	interceptorParameter extends {} = {},
>{
	
	post(
		path: "/login", 
		body: request_body_0,
		parameters ?: UndefinedRequestParameters & BaseRequestParameters,
		interceptorParams?: interceptorParameter
	): EnrichedRequestor<
		response_0_0
		| response_0_1
		| response_0_2
	>

	post(
		path: "/register", 
		body: request_body_1,
		parameters ?: UndefinedRequestParameters & BaseRequestParameters,
		interceptorParams?: interceptorParameter
	): EnrichedRequestor<
		response_1_0
		| response_1_1
		| response_1_2
		| response_1_3
	>

}

/** @deprecated */
export type EnrichedDuplojsTo<
	interceptorParameter extends {} = {},
> = EnrichedDuploTo<interceptorParameter>;
